#ifndef DOUBLE_LIST_H
#define DOUBLE_LIST_H
//C std lib
#include <stdint.h>
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 实现目标:泛型链表(侵入式单双链表, 带头尾节点) */
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 从当前链表节点地址获得它的所有者地址(编译时解析) */
#define DL_GetOwner(Type, Member, MemberAddress)    \
    ((Type *)((uint8_t *)(MemberAddress) - ((uint64_t) &((Type *)0)->Member)))
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 双向链表 */
struct DoubleList {
    void *Parameter0;
    void *Parameter1;
};
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 核心转义 */
typedef struct DoubleList DL_List;
typedef struct DoubleList DL_Node;
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
void DL_List_Reset(DL_List *List);
void DL_Node_Reset(DL_Node *Node);
DL_Node * DL_List_GetHead(DL_List *List);
DL_Node * DL_List_GetTail(DL_List *List);
DL_Node * DL_Node_GetPrev(DL_Node *Node);
DL_Node * DL_Node_GetNext(DL_Node *Node);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 节点前插入(节点Target为NULL时为头部插入) */
void DL_List_InsertPrepend(DL_List *List, DL_Node *Target, DL_Node *Node);
/* 节点后插入(节点Target为NULL时为尾部插入) */
void DL_List_InsertAppend(DL_List *List,  DL_Node *Target, DL_Node *Node);
/* 节点移除 */
void DL_List_Remove(DL_List *List, DL_Node *Node);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 向后遍历链表宏 */
#define DL_List_Traverse_Backward(List, Node) \
    for (DL_Node *Node = DL_List_GetHead(List); Node != NULL; Node = DL_Node_GetNext(Node))
/* 向前遍历链表宏 */
#define DL_List_Traverse_Forward(List, Node)  \
    for (DL_Node *Node = DL_List_GetTail(List); Node != NULL; Node = DL_Node_GetPrev(Node))
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
#endif
