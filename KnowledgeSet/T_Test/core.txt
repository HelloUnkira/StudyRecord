
当前完成状态:
    1.宏迭代器:
        双向链表,单项链表
    2.内存监控器:
        用于全面监控内部申请和释放空间的情况
        使用一个额外的平台相关的同步原语(互斥锁)全局保护
    3.同步原语:
        一个原语集合的简要封装层:
            当前支持互斥锁和信号量,具有强扩展性,平台依赖
    4.句柄:
        一个资源管理器(依赖上述模组)
    5.剪切域:
        基本功能有:
            1.并集
            2.交集
            3.域包含检查
            4.点包含检查
        目标实现有:
            1.为剪切域链式集合,添加一个剪切域(可能存在或新的)
            2.为剪切域链式集合,移除一个剪切域(可能存在或空的)
            3.添加剪切域链式集合
            3.移除剪切域链式集合
    6.容器:
        基本功能有:
        获得一个容器属性专有句柄
        释放一个容器属性专有句柄
        为容器属性添加通用控件句柄
        为容器属性移除通用控件句柄
        获得容器所有通用控件句柄

///////////////////////////////////////////////////////////////////////////////

下一目标:

    绘制环境:
        绘制环境以句柄为目标
        一次转化,获得控件的类型
        二次转化,获得指定的控件
        对指定的剪切域进行定点绘制
    
        基本动作
            1.坐标转化
                目标:剪切域坐标-->缓冲区坐标
            
            1.基本绘制(必须有:)
                绘制图片
                绘制背景图片(默认全黑矩形)
                绘制矩形(绘制水平线和垂直线)
                绘制外框(线式矩形的组合体)
            2.扩充绘制(不一定要,因为可以用合适的图片资源代替):
                绘制环带(圆环)
                绘制渐变矩形
                绘制渐变环带
                ...
                绘制几何图形(斜线,圆,椭圆,...各种几何图形)

    容器:
        辅助动作:
            补充:
                对特定目标批量化应该放置在特定功能中
            容器设置Alpha通道
            容器添加剪切域(为所有孩子一并添加)
            容器清空剪切域(为所有孩子一并清空)

            容器是否包含屏幕坐标判断

            容器响应绘制消息动作:
                先绘制自己
                (如果需要停止时及时终止,某些子控件无需继续向下绘制)
                按注册顺序绘制全部子控件
                子控件绘制完后清空剪切域(观望态势)
                (非绘制消息推送到Widget绘制)

            容器响应按键事件:
                推送消息

            容器响应触摸事件:
                逆向迭代到最底层(如果没有栈维护树,那么只能递归)
                
            容器响应移动事件:
                自己和子控件树都要以对应偏移移动

            等等:
                较绕


///////////////////////////////////////////////////////////////////////////////

动态交互留到后面去额外添加:
    1.数字转文本(数字转字符动作)
    2.数字对应于文本Byte流长


定时器(动画):
    一个依赖系统软件定时器
    提供的持续响应绘制函数的模组
    每一次绘制都是从窗口开始往下迭代到所有子控件为止
    
    基本部分应该有:
        1.元响应回调(以一个及其稳定的速率触发(如1ms)):
            (刷新从窗口往下深度遍历)
            (通过一个字段去控制其刷新的频率)
            (内部维护俩个计数值:)
                (1.当前计数值)
                (2.目标计数值)
                (3.计数值迭代器(可使用它定制化刷新策略))
        
        2.创建动画(目标计数值设置)
          中止动画(目标计数值清0)
          恢复动画(目标计数值设置)
          结束动画(目标计数值清0)
              上述的场景归并为:
                  动画状态:
                  1.启动中(目标计数值不为0)
                  2.未启动(目标计数值为0)
                  2.中止(目标计数值为0)
                  2.终止(目标计数值为0)

消息引擎:
    多个消息队列,实现容器可选取数组(静态指定)或者链表等等
    从实际角度来说,使用链表相对于比较合算
    
    基本部分应该有:
        1.消息类型
            (所有消息最终可归化为以下几种类型的消息:)
            (上下左右滑动消息:滑动消息简化后可以只让:滚动窗口响应)
            (点击消息:从窗口一层层向下检查剪切域,最终派发到指定控件)
            (内支持消息:绘制消息(重绘制消息),同步消息)
            (外支持消息:如硬件中断消息(按键,鼠标等))
        2.消息携带的参数

    基本动作:
        (初始化和释放(消息可无需额外的初始化和反初始化动作,合并到动作))

        1.消息入队列
            (是否需要同步消息(使用回调交付CPU执行权限))
            (将同步消息传递给消息的接收者(处理者))
        
            (合并同类型的消息)交付到合并队列
            (不需要支持合并消息)交付到主队列

        2.消息出队列
            (外部接口主动获取一个消息)
            (被动出一个消息(使用回调交付CPU执行权限))
        
        3.合并同类型的消息:
            1.合并重绘消息(同一窗口)
            2.合并绘制消息(同一控件)
            3.合并移动消息(同一控件)
            4.合并....消息(同一....)

///////////////////////////////////////////////////////////////////////////////





控件:
    基础控制模块,描述一个区域内的显示状态
    控件是一个相对的区域,相对于0坐标点,但屏幕并不一定是0坐标点
    基本部分应该有:
        控件句柄
        控件在父区域内的剪切域
        任务处理回调
        消息处理回调
        控件类型
        控件状态(显示,隐藏)
        控件风格
        绘制环境
        父控件(父容器)
        控件私有属性
        控件默认图片(可为空)
        控件默认图片颜色
    
    基本动作:
        回调的管理和更新
        追溯窗口(向上迭代即可)
        获取窗口绘制环境
        控件坐标转屏幕坐标(窗口所在的剪切域即为屏幕剪切域)
        绘制控件(绘制默认图片或绘制默认颜色矩形)
        消息响应(遍历响应消息处理回调)
        控件创建
        控件销毁
        控件添加剪切域
        控件淡入淡出(alpha通道的更新)
        控件移动





