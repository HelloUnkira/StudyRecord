#ifndef SGUI_CONTAINER_H
#define SGUI_CONTAINER_H
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 容器描述 */
typedef struct SimpleGui_Container {
    SGui_Handle *Handle;
    SGui_Handle  Length;
} SGui_Container;
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 获得一个容器 */
static inline void SGui_ContainerCreate(SGui_Container *Container, SGui_Handle Length)
{
    Container->Handle = SGUI_ALLOC(sizeof(SGui_Handle) * Length);
    Container->Length = Length;
    
    for (SGui_Handle Index = 0; Index < Container->Length; Index++)
         Container->Handle[Index] = SGUI_HANDLE_INVALID;
}
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 释放一个容器 */
static inline void SGui_ContainerDestroy(SGui_Container *Container)
{
    SGUI_FREE(Container->Handle);
}
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 容器添加一个子控件 */
static inline void SGui_ContainerAdd(SGui_Container *Container, SGui_Handle Handle)
{
    for (SGui_Handle Index = 0; Index < Container->Length; Index++)
        if (Container->Handle[Index] == SGUI_HANDLE_INVALID)
            Container->Handle[Index]  = Handle;
}
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 容器移除一个子控件 */
static inline void SGui_ContainerRemove(SGui_Container *Container, SGui_Handle Handle)
{
    for (SGui_Handle Index = 0; Index < Container->Length; Index++)
        if (Container->Handle[Index] == Handle)
            Container->Handle[Index]  = SGUI_HANDLE_INVALID;
}
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 容器获得所有子控件(不做全抽象,直接获取即可,效率更高) */
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 容器迭代所有子控件 */
#define SGui_ContainerTraverse(Container)                                                     \
    for (SGui_Handle Index = 0, Handle = Container->Handle[Index]; Index < Container->Length; \
                     Index++,   Handle = Container->Handle[Index])                            \
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
#endif
