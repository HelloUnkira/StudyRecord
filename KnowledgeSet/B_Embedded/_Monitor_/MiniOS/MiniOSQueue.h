#ifndef MINI_OS_QUEUE_H
#define MINI_OS_QUEUE_H
//C std lib
#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 实现目标: 优先队列(侵入式队列, 带头尾节点单向队列) */
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 从当前链表节点地址获得它的所有者地址(编译时解析) */
#define MiniOS_PQ_GetOwner(Type, Member, MemberAddress)     \
    ((Type *)((uint8_t *)(MemberAddress) - ((uint64_t) &((Type *)0)->Member)))
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
struct MiniOS_PriorityQueue {
    union {
        struct MiniOS_PriorityQueue *Queue;
        struct MiniOS_PriorityQueue *Near;
    };
};
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
typedef struct MiniOS_PriorityQueue MiniOS_PQN;
typedef struct MiniOS_PriorityQueue MiniOS_PQB;
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
static inline void MiniOS_PQ_ResetQueue(MiniOS_PQB *Queue)
{
    Queue->Queue = NULL;
}
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
static inline void MiniOS_PQ_ResetNode(MiniOS_PQN *Node)
{
    Node->Near = NULL;
}
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
static inline MiniOS_PQN * MiniOS_PQ_CheckHead(MiniOS_PQB *Queue)
{
    return Queue->Queue;
}
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
static void MiniOS_PQ_EnQueue(MiniOS_PQB *Queue, MiniOS_PQN *Node,
                              bool (*Compare)(MiniOS_PQN *Node1, MiniOS_PQN *Node2))
{
    if (Queue->Queue == NULL) {
        Queue->Queue = Node;
        Node->Near = NULL;
        return;
    }
    if (Compare(Node, Queue->Queue) == true) {
        Node->Near = Queue->Queue;
        Queue->Queue = Node;
        return;
    }
    MiniOS_PQN *Current = NULL;
    for (Current = Queue->Queue; Current->Near != NULL; Current = Current->Near) {
        if (Compare(Current->Near, Node) == true)
            continue;
        Node->Near = Current->Near;
        Current->Near = Node;
        return;
    }
    Current->Near = Node;
    Node->Near = NULL;
    return;
}
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
static void MiniOS_PQ_DeQueue(MiniOS_PQB *Queue, MiniOS_PQN *Node)
{
    if (Node == NULL) {
        if (Queue->Queue == NULL)
            return;
        if (Queue->Queue != NULL) {
            Node = Queue->Queue;
            Queue->Queue = Queue->Queue->Near;
            return;
        }
    }
    if (Node != NULL) {
        if (Queue->Queue == NULL)
            return;
        if (Queue->Queue == Node) {
            Queue->Queue = Queue->Queue->Near;
            return;
        }
    }
    MiniOS_PQN *Current = NULL;
    for (Current = Queue->Queue; Current->Near != NULL; Current = Current->Near) {
        if (Current->Near != Node)
            continue;
        Current->Near = Current->Near->Near;
        return;
    }
    return;
}
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
#endif
