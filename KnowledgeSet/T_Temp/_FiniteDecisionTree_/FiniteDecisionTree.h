#ifndef FINITE_DECISION_TREE_H
#define FINITE_DECISION_TREE_H
//C std lib
#include <stdint.h>
#include <stdbool.h>
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 当前决策树只提供胜者树与败者树 */
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
typedef struct FiniteLoserTreeBody {
    uint32_t *Leave;    /* 长度:Length, 数据元中的特性值数组 */
    uint32_t *Node;     /* 长度:Length, 特性值数组索引数组 */
    uint32_t  Length;
} FiniteLoserTree;
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 每修改Tree->Leave[Index]的值都需要执行下面的动作 */
void FiniteLoserTree_Adjust(FiniteLoserTree *Tree, uint32_t Index);
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 当Tree->Leave[X]被批量更新时执行该动作刷新 */
static void FiniteLoserTree_Reflush(FiniteLoserTree *Tree)
{
    for (uint32_t Index = 0; Index < Tree->Length; Index /= 2)
        Tree->Node[Index] = Index;
    for (uint32_t Index = Tree->Length - 1; Index >= 0; Index /= 2)
        FiniteLoserTree_Adjust(Tree, Index);
}
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
typedef struct FiniteWinnerTreeBody {
    uint32_t *Leave;    /* 长度:Length, 数据元中的特性值数组 */
    uint32_t *Node;     /* 长度:Length, 特性值数组索引数组 */
    uint32_t  Length;
} FiniteWinnerTree;
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 每修改Tree->Leave[Index]的值都需要执行下面的动作 */
void FiniteWinnerTree_Adjust(FiniteWinnerTree *Tree, uint32_t Index);
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 当Tree->Leave[X]被批量更新时执行该动作刷新 */
static void FiniteWinnerTree_Reflush(FiniteWinnerTree *Tree)
{
    for (uint32_t Index = Tree->Length - 1; Index >= 0; Index /= 2)
        FiniteWinnerTree_Adjust(Tree, Index);
}
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
#endif
