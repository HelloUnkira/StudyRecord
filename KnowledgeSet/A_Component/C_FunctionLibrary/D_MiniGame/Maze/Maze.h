#ifndef MAZE_H
#define MAZE_H
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
#include <stddef.h>
#include <stdint.h>
#include <stdbool.h>
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
typedef struct MazeCellDescriptor {
    uint32_t PosX;  /* 单元格水平坐标(第四象限) */
    uint32_t PosY;  /* 单元格垂直坐标(第四象限) */
                    /* 单元格坐标映射到障碍物坐标映射 */
                    /*     Cell[I][J]与Cell[I+1][J]为Block[I][J].H_Status */
                    /*     Cell[I][J]与Cell[I][J+1]为Block[J][J].V_Status */
} MazeCell;
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
typedef struct MazeBlockDescriptor {
    uint8_t Visit:1;    /* 内部使用:单元格访问标志 */
    uint8_t H_Status:1; /* 水平障碍物标记(1:是障碍物,0:通路) */
    uint8_t V_Status:1; /* 垂直障碍物标记(1:是障碍物,0:通路) */
    /* 用户使用 */
    /* 节约空间,支持在此处扩展,不影响内部工作 */
    uint8_t Record:5;
} MazeBlock;
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
typedef struct MazeDescriptor {
    MazeBlock *Matrix;      /* 迷宫(第四象限),大小为[Lines][Elements] */
                            /*                 障碍物范围Block[0,Lines - 2][0, Elements - 2] */
                            /*                 单元格范围Block[0,Lines - 1][0, Elements - 1] */
                            /*                 也就是说边界默认都存在或都不存在障碍物 */
                            /*                 所以说在障碍物中并不额外记录边界信息 */
    uint32_t   Elements;    /* 迷宫行元素 */
    uint32_t   Lines;       /* 迷宫行数 */
    uint32_t (*Random)(uint32_t Number);    /* 生成一个随机整数:[0, Number -1] */
    /* 内部使用:工作时临时开辟的数据暂存块 */
    void *   (*Allocate)(uint32_t Size);
    void     (*Free)(void *Pointer);
    /* 内部维护:迭代流程使用,起始坐标与结束坐标,为四个角随机 */
    MazeCell PosS;  // Start
    MazeCell PosE;  // End
    MazeCell PosC;  // Current
    /* 用户设置:可以是颜色等等 */
    MazeBlock RecordS;  // 开始点记录
    MazeBlock RecordE;  // 结束点记录
    MazeBlock RecordC;  // 当前点记录
    MazeBlock RecordT;  // 过程点记录
} Maze;
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 使用随机普利姆算法(遍历单元格)生成迷宫 */
bool Maze_Ready(Maze *Instance);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
typedef enum MazeWayDescriptor {
    Maze_None  = 0,
    Maze_Up    = 0x01,
    Maze_Down  = 0x02,
    Maze_Left  = 0x04,
    Maze_Right = 0x08,
} MazeWay;
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
bool Maze_Execute(Maze *Instance, MazeWay Way);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
#endif
