#ifndef SGUI_EVENT_H
#define SGUI_EVENT_H
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 错误的事件(或者空事件) */
#define SGui_Event_Invalid  ((uint32_t)~0)
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 事件队列数量(静态配置) */
#define SGui_EventQueue_Number  (5)
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 事件(事件在本地保存副本,事件内数据生命期自行维护) */
typedef struct SimpleGui_Event {
    void    *Next;          /* 内部使用 */
    uint32_t EventType;     /* 事件类型 */
    uint32_t Parameter1;    /* 第一参数:通常转义为Length */
    uint8_t *Parameter2;    /* 第二参数:通常转义为Data */
} SGui_Event;
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
typedef uint32_t (*SGui_EventCallback)(SGui_Event *Event);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 事件集同步回调注册(并发访问的保护与实时同步) */
void SGui_EventSyncRegister(void (*Lock)(uint32_t   EventQueueType),
                            void (*Unlock)(uint32_t EventQueueType),
                            void (*Notify)(void), void (*Wait)(void));
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 事件生成同步等待 */
void SGui_EventSyncWait(void);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 检查某类的事件队列是否为空 */
bool SGui_EventIsEmpty(uint32_t EventQueueType);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 事件入队列(事件源生成使用) */
void SGui_EventEnqueue(uint32_t EventQueueType, SGui_Event *Event);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 事件出队列(事件引擎处理使用) */
void SGui_EventDequeue(uint32_t EventQueueType, SGui_Event *Event);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 为系统设计一个可注入的事件适配模板 */
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 为事件,事件通配处理回调,归属事件集,设计一个静态映射 */
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
typedef struct SimpleGui_EventAdaptor {
    SGui_EventCallback Callback;
    uint32_t EventQueueType;
} SGui_EventAdaptor;
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 事件值映射到事件表的下表,事件表映射出该事件的通配处理回调 */
void SGui_EventAdaptorRegister(SGui_EventAdaptor *EventTable, uint32_t Length);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
uint32_t SGui_EventGetEventQueueType(SGui_Event *Event);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
uint32_t SGui_EventDispatchExecute(SGui_Event *Event);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
#if SGUI_INTERNAL_TEST
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
void SGui_Event_Test(void);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
#endif
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
#endif
