#ifndef SGUI_GENERAL_GRAPH_H
#define SGUI_GENERAL_GRAPH_H
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 目标:定义简洁通配的基本图元 */
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 基本图元描述:坐标 */
#define SimpleGui_Coord int16_t
typedef SimpleGui_Coord SGui_Coord;
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 非法坐标点值(这里随意指定一个最大或最小值) */
#define SGUI_COORD_INVALID      ((SGui_Coord)0x8000)
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 基本图元描述:坐标点 */
typedef struct SimpleGui_Dot {
    SGui_Coord X;    //横坐标
    SGui_Coord Y;    //纵坐标
} SGui_Dot;
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 基本图元描述:区域 */
typedef union SimpleGui_Area {
    struct { /* 面向边界 */
        SGui_Coord BL_X;   //左边界X坐标(Boundary Left)
        SGui_Coord BU_Y;   //上边界Y坐标(Boundary Up)
        SGui_Coord BR_X;   //右边界X坐标(Boundary Right)
        SGui_Coord BB_Y;   //下边界Y坐标(Boundary Bottom)
    };
    struct { /* 面向坐标点 */
        SGui_Coord LU_X;    //左上角X坐标(Left,  Up)
        SGui_Coord LU_Y;    //左上角Y坐标(Left,  Up)
        SGui_Coord RB_X;    //右下角X坐标(Right, Down)
        SGui_Coord RB_Y;    //右下角Y坐标(Right, Down)
    };
    struct { /* 面向起点 */
        SGui_Coord Off_X;   //区域X偏移(Offset)
        SGui_Coord Off_Y;   //区域Y偏移(Offset)
        SGui_Coord Off_W;   //区域宽度(Offset Width)
        SGui_Coord Off_H;   //区域高度(Offset Height)
    };
} SGui_Area;
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 基本图元描述:像素流类型 */
typedef enum SimpleGui_StreamType {
    SGui_StreamIsDefault = 0,   /* 占位符:不使用,设定初始状态,作为纠错 */
    SGui_StreamIsPure,          /* 纯色:此时只需要Alpha通道即可完成数据融合 */
    SGui_StreamIsGrey,          /* 灰度:此时只需要Color通道即可完成数据融合 */
    SGui_StreamIsNormal,        /* 基础:此时为完整的像素点数据 */
} SGui_StreamType;
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 基本图元描述:像素流 */
typedef struct SimpleGui_Stream {
    SGui_StreamType Type;       /* 像素类型 */
    SGui_Alpha      Alpha;      /* 属性扩充:如果是纯色图,额外携带Alpha通道数据 */
    SGui_Color      Color;      /* 属性扩充:如果是灰度图,额外携带Color通道数据 */
} SGui_Stream;
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 基本图元描述:画布 */
typedef struct SimpleGui_Canvas {
    SGui_Pixel *Pixel;  /* 像素流(矩阵或点) */
    uint32_t    Length; /* 像素流空间大小 */
    SGui_Area   Offset; /* 像素流偏移区域(面向起点) */
    SGui_Area   Clip;   /* 画布空间剪切域(面向坐标点) */
} SGui_Canvas;
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 基本图元内嵌功能: */
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 坐标重置 */
static inline void SGui_DotReset(SGui_Dot *Dot)
{
    Dot->X = SGUI_COORD_INVALID;
    Dot->Y = SGUI_COORD_INVALID;
}
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 区域重置 */
static inline void SGui_AreaReset(SGui_Area *Area)
{
    Area->BL_X = SGUI_COORD_INVALID;
    Area->BU_Y = SGUI_COORD_INVALID;
    Area->BR_X = SGUI_COORD_INVALID;
    Area->BB_Y = SGUI_COORD_INVALID;
}
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 区域类型转化(坐标点转为偏移量) */
void SGui_AreaPosToOff(SGui_Area *Region);
/* 区域类型转化(偏移量转为坐标点) */
void SGui_AreaOffToPos(SGui_Area *Offset);
/* 区域转化生成(俩个点转为坐标点) */
void SGui_AreaFromDot2(SGui_Area *Region, SGui_Dot *Dot1, SGui_Dot *Dot2);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 画布数据流清空 */
void SGui_CanvasCleanPixel(SGui_Canvas *Canvas);
/* 画布设置剪切域(面向坐标点) */
bool SGui_CanvasSetClip(SGui_Canvas *Canvas, SGui_Area *Clip);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 绘制空间布局配置:高宽布局:1;宽高布局:2;(通常不会用到后者) */
#define SGui_CanvasOffset1(Canvas, X, Y)  Canvas->Pixel[(X) + (Y) * Canvas->Offset.Off_W]
#define SGui_CanvasOffset2(Canvas, X, Y)  Canvas->Pixel[(Y) + (X) * Canvas->Offset.Off_H]
/* 画布获取指定像素点位置(Dot取值范围需要是Canvas->Offset内) */
#define SGui_CanvasOffset(Canvas, X, Y)   SGui_CanvasOffset1(Canvas, X, Y)
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
#endif
