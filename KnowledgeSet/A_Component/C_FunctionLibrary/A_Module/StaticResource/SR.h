#ifndef STATIC_RESOURCE_H
#define STATIC_RESOURCE_H
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
#include <stddef.h>
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 静态项加载功能
 * 描述:
 *      将其固化到ELF指定段内的加载功能
 *      设计于系统上电时资源准备所用以简化与统一化流程
 *      系统会在初始化时优先加载这些注册项目
 *      (编译时加载到段,链接时建立索引)
 * Name:
 *      静态项的名字
 * Resource:
 *      静态项的资源
 * Function:
 *      加载静态项的函数,系统上电后自动调用(唯一使用点)
 * Parameter:
 *      传递给加载静态项的函数的参数(上一函数参数)
 * Level(级别1):
 *      该项数值越小加载越靠近前面
 *      它是一个不带前导0的0~7的数字(十进制)或等价宏
 * Priority(级别2):
 *      该项数值越小加载越靠近前面
 *      它是一个不带前导0的0~7的数字(十进制)或等价宏
 */
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
typedef struct StaticResourceEntry {
    char  *Name;
    void  *Resource;
    bool (*Function)(const void *Parameter);
    void  *Parameter;
} SR_Entry;
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 内部使用 */
#define SR_ENTRY_DECLARE(Name, Level, Priority)                 \
    const static SR_Entry SR_ ## Name                           \
    __attribute__((__used__))                                   \
 /* __attribute__((__aligned(__alignof(SR_Entry)))) */          \
    __attribute__((__section__(".SR_" #Level "_" #Priority)))   \
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 内部使用 */
#define SR_ENTRY_MEMBER(_Name, _Function, _Parameter, _Resource)    \
{                                   \
    .Name       = _Name,            \
    .Function   = _Function,        \
    .Parameter  = _Parameter,       \
    .Resource   = _Resource,        \
}                                   \
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 声明一个静态项 */
#define SR_DECLARE(Name, Level, Priority, Function, Parameter, Resource)    \
        SR_ENTRY_DECLARE(Name, Level, Priority) =                           \
        SR_ENTRY_MEMBER(#Name, Function, Parameter, Resource)               \
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 静态项优先层级 */
#define SR_Level_Default        0
#define SR_Level_System         1
#define SR_Level_Module         2
#define SR_Level_Application    3
#define SR_Level_4              4
#define SR_Level_5              5
#define SR_Level_6              6
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 静态项加载优先级 */
#define SR_Priority_0           0
#define SR_Priority_1           1
#define SR_Priority_2           2
#define SR_Priority_3           3
#define SR_Priority_4           4
#define SR_Priority_5           5
#define SR_Priority_6           6
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 段内的静态项表头与表尾(按优先级归类排序) */
extern SR_Entry SR_Table_S;
extern SR_Entry SR_Table_E;
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 迭代静态项布局表 */
#define SR_EntryIterator(Entry) \
    for (SR_Entry *Entry = &SR_Table_S; Entry < &SR_Table_E; Entry++)   \
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
static inline void SR_EntryLoading(void)
{
    SR_EntryIterator(Entry)
        if (Entry->Function)
            Entry->Function(Entry->Parameter);
}
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
static inline void * SR_EntryFind(const char *Name)
{
    for (SR_Entry *Entry = &SR_Table_S; Entry < &SR_Table_E; Entry++)
        if (strcmp(Entry->Name, Name) == 0)
            return Entry;
    return NULL;
}
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
#endif
