#ifndef ARRAY_STRUCT_H
#define ARRAY_STRUCT_H
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
#define BArrCpy(Type, Len, BArr1, BArr2)    \
    do {typedef struct {Type Arr[Len];} Arr; *(Arr *)(BArr1) = *(Arr *)(BArr2);} while (0)
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* (封装后的一等公民,有待完善) */
#define ArrDef(ArrType, Type, Len)  typedef struct {Type Arr[Len];} ArrType;
#define ArrInit(...)                {.Arr[] = {__VA_ARGS__},};
#define ArrCvrt(ArrName)            (ArrName.Arr)
#define ArrLen(ArrName)             (sizeof(ArrName.Arr) / sizeof(ArrName.Arr[0]))
/* Example:
 * //生成一个(类型为int,长度为10)数组模板:
 * ArrDef(ArrayInt10, int, 10);
 * ArrayInt10 Array1 = {0};
 * ArrayInt10 Array2 = ArrInit(1, 2, 3, 4, 5);
 * //将Array2拷贝到Array1:
 * //Array1 = Array2;
 * //支持传参及数据返回:
 * ArrayInt10 Array_XOR(ArrayInt10 Arg1, ArrayInt10 Arg2)
 * {
 *      ArrayInt10 Result = {0};
 *      for (int I = 0; I < ArrLen(Result); I++)
 *          //操作里面所有数据, 寻址退化:
 *          ArrCvrt(Result)[i] = ArrCvrt(Arg1)[i] ^ ArrCvrt(Arg2)[i];
 *      return Result;
 * }
 * ArrayInt10 Array0 = Array_XOR(Array1, Array2);
 */
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
#endif
