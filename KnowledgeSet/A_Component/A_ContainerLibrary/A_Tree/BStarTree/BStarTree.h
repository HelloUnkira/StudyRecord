#ifndef B_STAR_TREE_H
#define B_STAR_TREE_H
//C std lib
#include <stddef.h>
#include <stdint.h>
#include <stdbool.h>

#ifdef  BSTARTREE_C

//用于维护非实体外的数据结构
#include <stdlib.h>
/*
 *寻找一个实现: sizeof(uintxxx_t) <==> sizeof(void *)
 *选取一个与void*字节长度一致的整形类型,它将用作空间的节约
 *如果不是严格等价定义,造成截断现象,ERROR_PRINT产生side错误,如果它被启用
 */
#define VOID_STAR_TYPE uint64_t

//B*树需要额外的动态内存分配接口用于内部生成维护空间
#define INTERNAL_MALLOC(size)   malloc(size)
#define INTERNAL_FREE(pointer)  free(pointer)
//如果上述接口不能正确提供,B*树不能正常工作

#ifndef INTERNAL_MALLOC(size)
#error  "B * Tree needs to redirect the dynamic allocation function"
#endif

#ifndef INTERNAL_FREE(pointer)
#error  "B * Tree needs to redirect the dynamic release function"
#endif

//可裁剪项,紧化程序
#include <stdio.h>
#define ERROR_PRINT(target, str) \
    if (target) printf("%s\n",(str));

#endif

///////////////////////////////////////////////////////////////////////////////
//辅助构建:获得集合和容器的大小////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
uint32_t BST_GetBytes_Set(void);
uint32_t BST_GetBytes_Container(void);
///////////////////////////////////////////////////////////////////////////////
//辅助构建:数据集转化关键字////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
typedef uint32_t (*data_key)(void *data_struct);
///////////////////////////////////////////////////////////////////////////////
//辅助构建:设置集合的参数//////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
void BST_SetTree(void *Tree, uint32_t Length, data_key Key);
///////////////////////////////////////////////////////////////////////////////
//核心动作:插入,删除///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
void BST_InsertNode(void *Tree, void *Data);
void BST_RemoveNode(void *Tree, void **Data, uint32_t key_value);
void BST_SearchNode(void *Tree, void **Data, uint32_t key_value);
///////////////////////////////////////////////////////////////////////////////
//辅助动作:打印一个数据集合////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
typedef void (*Print)(uint32_t CurrentNumber, uint32_t *KeySet, void **DataSet);
///////////////////////////////////////////////////////////////////////////////
//辅助动作:层序遍历,并对所有节点操作///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
uint32_t RST_Sequence_Traversal(void *Tree, Print Printf, uint8_t Destroy);

#endif
