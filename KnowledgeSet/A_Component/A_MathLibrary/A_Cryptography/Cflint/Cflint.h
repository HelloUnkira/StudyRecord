#ifndef CFLINT_H
#define CFLINT_H
//C std lib
//遵守C99标准
#include <stddef.h>
#include <stdint.h>
#include <stdbool.h>
#include <string.h>

/*Cflint(Abbr):
 *C Functions For Large Integers In Number Theory And Cryptography
 *大数理论与密码学的C函数集
 */

/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 平台相关所需配置项:起始!!!!!! */
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 辅助功能:测试阶段所用于确定平台信息明细 */
typedef void (*Cflint_PortInfoPrint)(const char *Parameter, uint32_t Result);
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
static inline void Cflint_PortInfoCheck(Cflint_PortInfoPrint Print)
{
    /* 如果已知对应信息,可直接配置本函数内的宏的值 */
    /* 否则,使用输出的结果去配置对应宏的值 */
    /* 因为被inline关键字限制,在正式使用时,该函数会被编译器优化掉 */
    /* -------------------------检查与配置开始------------------------- */
    /* ----------平台字节对齐检查---------- */
    /* 平台字节对齐配置项:==sizeof(void *) */
    /* 注意:平台字节对齐可加速运算,但如果需要指定其他类型 */
    /* 可以直接修改其为非平台字节对齐类型 */
    #define CFLINT_TYPE_PORT     4
    Print("Port Byte Alignment:%u\r\n", sizeof(void *));
    /* ----------平台大小端序检查---------- */
    /* 大小端序配置项:(小端序:0;大端序:1) */
    #define CFLINT_ENDIAN_PORT   0
    union {uint8_t Byte; uint32_t Integer;} Endian; Endian.Integer = 1;
    Print("Port Endian:%u\r\n", Endian.Byte == 1 ? 0 : 1);
    /* -------------------------检查与配置结束------------------------- */
}
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 无需使用的功能注释即可,线性向上依赖 */
#define CFLINT_USE_FUNCTION_SET1
#define CFLINT_USE_FUNCTION_SET2
#define CFLINT_USE_FUNCTION_SET3
#define CFLINT_USE_FUNCTION_SET4
#define CFLINT_USE_FUNCTION_SET5
#define EXTEND_USE_MENTGOMERY       /* 蒙哥马利功能 */
#define EXTEND_USE_RSA              /* 该部分不是完全的实现 */
#define EXTEND_USE_ECC
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 平台相关所需配置项:结束!!!!!! */
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 数据类型相关的部分 */
#include "CflintData.h"
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 运算相关接口 */
#include "CflintFunctionSet1.h"     /* 简介:辅助功能,位运算功能 */
#include "CflintFunctionSet2.h"     /* 简介:基础运算功能 */
#include "CflintFunctionSet3.h"     /* 简介:大数欧几里得运算功能 */
#include "CflintFunctionSet4.h"     /* 简介:求根及其二次剩余 */
#include "CflintFunctionSet5.h"     /* 简介:大随机数,素性相关,未完善 */
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
#include "Extend_RSA.h"              /* 这里只提供流程,未提供完全实现 */
#include "Extend_ECC.h"
#include "Extend_Mentgomery.h"       /* 蒙哥马利运算相关接口 */
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
#endif
