#ifndef CFLINT_FUNCTION_SET2_H
#define CFLINT_FUNCTION_SET2_H
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
#ifdef CFLINT_USE_FUNCTION_SET2
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 和运算:Operand += Overflow */
Cflint_Type Cflint_AdditionBit(Cflint_Type *Operand, uint32_t Length, Cflint_Type Overflow);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 差运算:Operand -= Overflow */
Cflint_Type Cflint_SubtractionBit(Cflint_Type *Operand, uint32_t Length, Cflint_Type Overflow);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 翻转数:模对称翻转数 */
Cflint_Type Cflint_Reserve(Cflint_Type *Operand, uint32_t Length);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 和运算:Result = Operand1 + Operand2 */
Cflint_Type Cflint_Addition(Cflint_Type *Result, Cflint_Type *Operand1, 
                            Cflint_Type *Operand2,  uint32_t  Length);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 差运算:Result = Operand1 - Operand2 */
Cflint_Type Cflint_Subtraction(Cflint_Type *Result, Cflint_Type *Operand1,
                               Cflint_Type *Operand2,  uint32_t  Length);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 乘运算:Result = Operand1 * Operand2; 结果的长度实际是Length * 2 */
void Cflint_Multiply(Cflint_Type *Result, Cflint_Type *Operand1,
                     Cflint_Type *Operand2,  uint32_t  Length);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 方运算:Result = Operand * Operand; 结果的长度实际是Length * 2 */
void Cflint_Square(Cflint_Type *Result, Cflint_Type *Operand, uint32_t Length);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 带余除运算:Quotient = Operand0 / Operand1; Module = Operand0 % Operand1 */
void Cflint_Devide(Cflint_Type *Quotient, Cflint_Type *Module,
                   Cflint_Type *Operand0, Cflint_Type *Operand1,
                      uint32_t  Length);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 基础模运算:Module = Operand0 % Operand1 */
void Cflint_Modulo(Cflint_Type *Module, Cflint_Type *Operand0,
                   Cflint_Type *Operand1,  uint32_t  Length);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 模和运算:Result = (Operand0 + Operand1) % Module */
void Cflint_ModuloAddition(Cflint_Type *Result,   Cflint_Type *Module,
                           Cflint_Type *Operand0, Cflint_Type *Operand1,
                           Cflint_Type *Temp[2],     uint32_t  Length);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 模差运算:Result = (Operand0 - Operand1) % Module */
void Cflint_ModuloSubtraction(Cflint_Type *Result,   Cflint_Type *Module,
                              Cflint_Type *Operand0, Cflint_Type *Operand1,
                              Cflint_Type *Temp[2],     uint32_t  Length);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 模乘运算:Result = (Operand0 * Operand1) % Module */
/* 要求:Temp[0~1]的长度为Length*2 */
void Cflint_ModuloMultiply(Cflint_Type *Result,   Cflint_Type *Module,
                           Cflint_Type *Operand0, Cflint_Type *Operand1,
                           Cflint_Type *Temp[2],     uint32_t  Length);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 模方运算:Result = (Operand * Operand) % Module */
/* 要求:Temp[0~1]的长度为Length*2 */
void Cflint_ModuloSquare(Cflint_Type *Result,  Cflint_Type *Module,
                         Cflint_Type *Operand, Cflint_Type *Temp[2],
                            uint32_t  Length);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 模幂运算:Result = (Operand**Exponent) % Module */
/* 要求:Temp[0~4]的长度为Length*2 */
void Cflint_ModuloExponent(Cflint_Type *Result,  Cflint_Type *Module,
                           Cflint_Type *Operand, Cflint_Type *Exponent,
                           Cflint_Type *Temp[4],    uint32_t  Length);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 模逆运算: Result = (1 / Operand) % Module */
/* 要求:Operand < Module且互素 */
void Cflint_ModuloInverse(Cflint_Type *Result, Cflint_Type *Operand,
                          Cflint_Type *Module, Cflint_Type *Temp[4],
                             uint32_t  Length);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 带符号与运算:Result * (*ResultFlag) = Operand1 * (Operand1_Flag) + */
/*                                       Operand2 * (Operand2_Flag)   */
/* 备注:大数运算本身是无符号语义运算,这里是为某些数学运算额外扩展 */
Cflint_Type Cflint_FlagSum(Cflint_Type *Result,   Cflint_Type *ResultFlag,
                           Cflint_Type *Operand1, Cflint_Type  Operand1_Flag,
                           Cflint_Type *Operand2, Cflint_Type  Operand2_Flag,
                              uint32_t  Length);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
/* 带符号模运算:Result = Operand1 * (Operand1_Flag) % Operand2 */
/* 备注:大数运算本身是无符号语义运算,这里是为某些数学运算额外扩展 */
void Cflint_FlagModulo(Cflint_Type *Result,   Cflint_Type *Operand1,
                       Cflint_Type *Operand2, Cflint_Type  Operand1_Flag,
                          uint32_t  Length);
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
#endif
/*************************************************************************************************/
/*************************************************************************************************/
/*************************************************************************************************/
#endif
