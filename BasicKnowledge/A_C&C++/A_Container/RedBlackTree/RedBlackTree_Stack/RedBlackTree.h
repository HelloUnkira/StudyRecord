#ifndef	REDBLACKTREE_H
#define	REDBLACKTREE_H
//C std lib
#include <stdint.h>
#include <stdbool.h>

//深度为K的二叉树,最多有2^k - 1个节点

#ifdef REDBLACKTREE_C

//红黑树涉及到的引用
/*
 *寻找一个实现: sizeof(uintxxx_t) <==> sizeof(void *)
 *选取一个与void*字节长度一致的整形类型,它将用作空间的节约
 *如果不是严格等价定义,造成截断现象,ERROR_PRINT产生side错误,如果它被启用
 */
#define VOID_STAR_TYPE uint64_t

#include "stdio.h"
#define ERROR_PRINT(target, str) \
    if (target) printf("%s\n",(str));

#endif

///////////////////////////////////////////////////////////////////////////////
//为动态配置红黑树堆栈最大空间的理论参考值/////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#define PBITS(t) ((sizeof(t)) * 8)
#define TBITS(t) ((sizeof(t)) < 8 ? 2 : 3)
#define RBT_MAX_DEPTH (2 * (PBITS(uint32_t *) - TBITS(uint32_t *) - 1) + 1)

///////////////////////////////////////////////////////////////////////////////
//红黑树所需的空间大小(1byte规定为8位)/////////////////////////////////////////
//节点所需的空间大小(1byte规定为8位)///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
uint32_t RBT_GetBytes_Container(void);
uint32_t RBT_GetBytes_Set(void);

///////////////////////////////////////////////////////////////////////////////
//为节点排序所用到的回调///////////////////////////////////////////////////////
//用户数据集中需要有一个key去确认俩个节点的关系////////////////////////////////
//this_data严格小于that_data返回非零值/////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
typedef uint8_t (*Compare)(void *ThisData, void *ThatData);

///////////////////////////////////////////////////////////////////////////////
//为查找比对所用到的回调///////////////////////////////////////////////////////
//用户数据集中需要有一个key去确认俩个节点的关系////////////////////////////////
//this_data与target_data的关键字一致返回0//////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
typedef uint8_t (*Comfirm)(void *ThatData, void *TargetData);

///////////////////////////////////////////////////////////////////////////////
//红黑树和节点的初始化,空间由上层提供,其对应结构大小从上可得///////////////////
//它们是以平台位数为依赖项的,所以同一平台该值是固定的,可以先静态获取///////////
///////////////////////////////////////////////////////////////////////////////
void RBT_SetTree(void *tree_mem, Compare k_compare, Comfirm k_confirm);
void RBT_SetRoot(void *Tree, void *Node);
void RBT_GetRoot(void *Tree, void **Node);
void RBT_SetNodeData(void *Node, void *Data);
void RBT_GetNodeData(void *Node, void **Data);

///////////////////////////////////////////////////////////////////////////////
//追踪维护红黑树使用到的堆栈,它是get_rb_container_bytes()类型的数组////////////
///////////////////////////////////////////////////////////////////////////////
void RBT_SetTreeStack(void *Tree, void *Stack, uint32_t Length);
void RBT_GetTreeStack(void *Tree, void **Stack, uint32_t *Length);

///////////////////////////////////////////////////////////////////////////////
//核心动作:插入,删除///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
void RBT_InsertNode(void *Tree, void *Node);
void RBT_RemoveNode(void *Tree, void *Data);

///////////////////////////////////////////////////////////////////////////////
//查找(成功返回用户数据集索引,并可直接修改内部数据)////////////////////////////
///////////////////////////////////////////////////////////////////////////////
void * RBT_SearchData(void *Tree, void *TargetData);

///////////////////////////////////////////////////////////////////////////////
//获取树深/////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
uint32_t RBT_GetMaxDepth(void *Tree);

///////////////////////////////////////////////////////////////////////////////
//层序遍历(用于打印),需要提供一个足够大的队列(不超过所有节点大小)//////////////
//改变传入的print可以使层序遍历完成别的工作////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
typedef void (*Print)(void *node, void *Data, int32_t color);
void RBT_Sequence_Traversal(void *Tree, Print Printf, void *Queue, int32_t Length);

#endif
