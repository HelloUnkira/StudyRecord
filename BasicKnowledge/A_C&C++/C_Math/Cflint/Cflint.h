#ifndef CFLINT_H
#define CFLINT_H
//C std lib
//遵守C99标准
#include <stdint.h>
#include <stdbool.h>

/*Cfint(Abbr):
 *C Functions For Large Integers In Number Theory And Cryptography
 *大数理论与密码学的C函数集
 */

/* 部分预先配置项 */
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 平台大小端序检查,用于修订下述宏的配置情况 */
uint8_t Cflint_CheckEndian(void);
/* 大小端序配置项 */
#define CFLINT_ENDIAN   1
/* 平台字节对齐检查,用于修订下述宏的配置情况 */
uint8_t Cflint_CheckBytes(void);
/* 平台字节对齐配置项 */
#define CFLINT_BYTE     8



/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 大小端序配置项 */
#if 0
#elif   CFLINT_ENDIAN == 0
#define CFLINT_ENDIAN_BIG
#elif   CFLINT_ENDIAN == 1
#define CFLINT_ENDIAN_LITTLE
#else
#error  "Error Configure:Port Endian"
#endif
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 平台字节对齐类型定义 */
#if 0
#elif   CFLINT_BYTE == 1
#define CFLINT_BYTES    uint8_t
#define CFLINT_BYTEBIT  8
#define CFLINT_BYTES2   uint16_t
#define CFLINT_HALF     0x0F
#elif   CFLINT_BYTE == 2
#define CFLINT_BYTES    uint16_t
#define CFLINT_BYTEBIT  16
#define CFLINT_BYTES2   uint32_t
#define CFLINT_HALF     0x00FF
#elif   CFLINT_BYTE == 4
#define CFLINT_BYTES    uint32_t
#define CFLINT_BYTEBIT  32
#define CFLINT_BYTES2   uint64_t
#define CFLINT_HALF     0x0000FFFF
#elif   CFLINT_BYTE == 8
#define CFLINT_BYTES    uint64_t
#define CFLINT_BYTEBIT  64
//#define CFLINT_BYTES2   uint128_t
#define CFLINT_HALF     0x00000000FFFFFFFF
#else
#error  "Error Configure:Port Byte Alignment"
#endif
#define CFINT_TYPE      CFLINT_BYTE
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/*  */
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 和运算 */
void Cflint_Addition(CFLINT_BYTES *Result,    CFLINT_BYTES *Overflow,  
                     CFLINT_BYTES *Operator1, CFLINT_BYTES *Operator2,
                     uint32_t Length);
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 差运算 */
void Cflint_Subtraction(CFLINT_BYTES *Result,    CFLINT_BYTES *Overflow,  
                        CFLINT_BYTES *Operator1, CFLINT_BYTES *Operator2,
                        uint32_t Length);
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 乘运算 */
void Cflint_Multiply(CFLINT_BYTES *Result,    uint32_t Length,
                     CFLINT_BYTES *Operator1, CFLINT_BYTES *Operator2);
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 方运算 */
void Cflint_Square(CFLINT_BYTES *Result, uint32_t Length,
                   CFLINT_BYTES *Operator);
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 左移位运算 */
void Cflint_ShiftLeft(CFLINT_BYTES *Result, uint32_t Length, uint32_t Bits2);
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 右移位运算 */
void Cflint_ShiftRight(CFLINT_BYTES *Result, uint32_t Length, uint32_t Bits2);
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
#define CFLINT_USE_AES128
#ifdef  CFLINT_USE_AES128
/* AES128加(Flag:0)解(Flag:1)密 */
void AES128_Run(uint8_t *Text, uint32_t Length, uint8_t Key[16], uint8_t Flag);
#endif
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/


#endif
