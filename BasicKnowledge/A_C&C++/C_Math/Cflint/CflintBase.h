#ifndef CFLINTBASE_H
#define CFLINTBASE_H
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 拷贝:Operand0 = Operand1 */
static inline void Cflint_Copy(CFLINT_TYPE *Operand0, CFLINT_TYPE *Operand1,
                               uint32_t Length)
{
    for (uint32_t Index = 0; Index < Length; Index++)
        Operand0[Index] = Operand1[Index];
}
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 比较:((>:1);(==:0);(<:-1)) */
static inline int8_t Cflint_Compare(CFLINT_TYPE *Operand0,
                                    CFLINT_TYPE *Operand1, uint32_t Length)
{
    for (int64_t Index = (int64_t)Length - 1; Index >= 0; Index--)
        if (Operand0[Index] != Operand1[Index]) {
            if (Operand0[Index] > Operand1[Index])
                return 1;
            if (Operand0[Index] < Operand1[Index])
                return -1;
        }
    return 0;
}
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 相等判断:((==:1);(!=:0)) */
static inline bool Cflint_Equal(CFLINT_TYPE *Operand0,
                                CFLINT_TYPE *Operand1, uint32_t Length)
{
    CFLINT_TYPE Result = 0;
    for (uint32_t Index = 0; Index < Length; Index++)
        Result |= Operand0[Index] ^ Operand1[Index];
    return (Result == 0 ? true : false);
}
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 计算有效位数:2进制位数 */
static inline int64_t Cflint_Numbers2(CFLINT_TYPE *Operand, uint32_t Length)
{
    /* 先计算前导0 */
    int64_t Numbers2Zero = 0, Index1 = 0, Index2 = 0;
    /* 粗粒度计算 */
    for (Index1 = (int64_t)Length - 1; Index1 >= 0; Index1--)
        if (Operand[Index1] != 0)
            break;
    /* 一次查验,全空时 */
    if (Index1 < 0)
        return (((int64_t)Length) * ((int64_t)CFLINT_BITS));
    /* 不存在全空时,查验落点位 */
    for (Index2 = (int64_t)CFLINT_BITS - 1; Index2 >= 0; Index2--)
        if ((Operand[Index1] & (1 << Index2)) != 0)
            break;
    /* 二次计算,返回 */
    return (((int64_t)(Index1)) * ((int64_t)CFLINT_BITS)) + Index2;
}
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 为0判断:Operand == 0 */
static inline bool Cflint_IsZero(CFLINT_TYPE *Operand, uint32_t Length)
{
    for (uint32_t Index = 0; Index < Length; Index++)
        if (Operand[Index] != 0)
            return false;
    return true;
}
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 设值:类似memset */
static inline void Cflint_SetValue(CFLINT_TYPE *Operand, uint32_t Length,
                                   CFLINT_TYPE  Value)
{
    for (uint32_t Index = 0; Index < Length; Index++)
        Operand[Index] = Value;
}
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 和运算:Result = Operand1 + Operand2 */
CFLINT_TYPE Cflint_Addition(CFLINT_TYPE *Result, CFLINT_TYPE *Operand1, 
                            CFLINT_TYPE *Operand2,   uint32_t Length);
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 差运算:Result = Operand1 - Operand2 */
CFLINT_TYPE Cflint_Subtraction(CFLINT_TYPE *Result, CFLINT_TYPE *Operand1,
                               CFLINT_TYPE *Operand2,   uint32_t Length);
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 乘运算:Result = Operand1 * Operand2; 结果的长度实际是Length * 2 */
void Cflint_Multiply(CFLINT_TYPE *Result, CFLINT_TYPE *Operand1,
                     CFLINT_TYPE *Operand2,   uint32_t Length);
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 方运算:Result = Operand * Operand; 结果的长度实际是Length * 2 */
void Cflint_Square(CFLINT_TYPE *Result, CFLINT_TYPE *Operand, uint32_t Length);
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 左移位运算:Operand <<= Bits2(2进制位) */
void Cflint_ShiftLeft2(CFLINT_TYPE *Operand, uint32_t Length, uint64_t Bits2);
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 右移位运算:Operand >>= Bits2(2进制位) */
void Cflint_ShiftRight2(CFLINT_TYPE *Operand, uint32_t Length, uint64_t Bits2);
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 左移位运算:Operand <<= BitsN(N进制位) */
void Cflint_ShiftLeftN(CFLINT_TYPE *Operand, uint32_t Length, uint32_t BitsN);
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 右移位运算:Operand >>= BitsN(N进制位) */
void Cflint_ShiftRightN(CFLINT_TYPE *Operand, uint32_t Length, uint32_t BitsN);
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 带余除运算:Quotient = Operand0 / Operand1; Module = Operand0 % Operand1 */
void Cflint_Devide(CFLINT_TYPE *Quotient, CFLINT_TYPE *Module, uint32_t Length,
                   CFLINT_TYPE *Operand0, CFLINT_TYPE *Operand1);
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
#endif
