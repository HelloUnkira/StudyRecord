#ifndef CFLINT_FUNCTION_SET4_H
#define CFLINT_FUNCTION_SET4_H
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
#ifdef CFLINT_USE_FUNCTION_SET4
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 2次方根整数部运算:[Sqrt(Operand)] */
void Cflint_Root2Integer(CFLINT_TYPE *Result, CFLINT_TYPE *Operand,
                         CFLINT_TYPE *Temp[4],   uint32_t  Length);
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 2次方数判别检查:Sqrt(Operand)**2 == Operand */
/* 要求Temp[0]的长度为Length*2 */
bool Cflint_Root2Check(CFLINT_TYPE *Result, CFLINT_TYPE *Operand,
                       CFLINT_TYPE *Temp[4],   uint32_t  Length);
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* Jacobi符号计算:Jacobi(Operand1/Operand2) */
int8_t Cflint_JacobiFlag(CFLINT_TYPE *Operand1, CFLINT_TYPE *Operand2,
                         CFLINT_TYPE *Temp[3],     uint32_t  Length);
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 二次剩余计算:((Result**2) % Operand2 == Operand1 % Operand2) */
/* 模为Operand2 > 2的奇素数, 要求Temp[6~9]为Length * 2 */
bool Cflint_ModuloP1Root2(CFLINT_TYPE *Operand1,  CFLINT_TYPE *Operand2,
                          CFLINT_TYPE *Result,    CFLINT_TYPE *Temp[10],
                             uint32_t  Length);
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 扩展二次剩余计算:(X(K)**2) % P == A % (P**K) */
bool Cflint_ModuloPkRoot2(CFLINT_TYPE *Operand1,  CFLINT_TYPE *Operand2,
                          CFLINT_TYPE *Result,    CFLINT_TYPE *Temp[10],
                              int64_t  Exponent,     uint32_t  Length);
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/* 二次剩余计算:((Result**2) % (Operand2 * Operand3) ==  */
/*               (Operand1)  % (Operand2 * Operand3))    */
/* 模为Operand2,Operand3 > 2的奇素数, Operand1, Result为Length * 2 */
/* 要求Temp[3~10]  为(Length+1)*2 */
/* 要求Temp[11~12]为Length * 4 */
bool Cflint_Modulo1Root2(CFLINT_TYPE *Operand1,  CFLINT_TYPE *Operand2,
                         CFLINT_TYPE *Operand3,  CFLINT_TYPE *Result,
                         CFLINT_TYPE *Temp[13],     uint32_t  Length);
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
#endif
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
#endif
